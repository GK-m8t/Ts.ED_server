{"version":3,"file":"SignatureVerificationMiddleware.js","sourceRoot":"src/","sources":["middlewares/SignatureVerificationMiddleware.ts"],"names":[],"mappings":";AAAA;;;;;;;;;GASG;;;;AAEH,2DAAgD;AAChD,qEAA2E;AAC3E,sDAA0D;AAC1D,mCAAgC;AAGzB,IAAM,+BAA+B,GAArC,MAAM,+BAA+B;IAC1C,GAAG,CAAY,IAAa;QAC1B,IAAI;YACF,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,eAAe,EAAE,OAAO,EAAE,GAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;YACpE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;YAEhD,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,4BAAgB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;gBACtD,IAAI,CAAC,4BAAgB,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;oBAC7C,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;oBAClD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC7B,OAAO,EAAE,oCAAoC;qBAC9C,CAAC,CAAC;iBACJ;aACF;YACD,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC;YAClE,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACpC,IAAI,CAAC,SAAS,EAAE;gBACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC7B,OAAO,EAAE,qBAAqB;iBAC/B,CAAC,CAAC;aACJ;YAED,wEAAwE;YACxE,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACzC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YACxC,IAAI,WAAW,GAAG,SAAS,GAAG,MAAM,EAAE;gBACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC7B,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;aACJ;YAED,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;YAChD,MAAM,gBAAgB,GAAG,eAAM,CAAC,KAAK,CAAC,aAAa,CACjD,eAAe,EACf,aAAa,CACd,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YAC5C,sDAAsD;YACtD,IACE,gBAAgB,KAAK,aAAa;gBAClC,WAAW,GAAG,SAAS,GAAG,MAAM,EAChC;gBACA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC7B,OAAO,EAAE,+BAA+B;iBACzC,CAAC,CAAC;aACJ;SACF;QAAC,OAAO,KAAK,EAAE;YACd,8FAA8F;YAC9F,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC7B,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC,CAAC;SACJ;IACH,CAAC;CACF,CAAA;AAzDY,0EAA+B;AAC1C;IAAK,mBAAA,IAAA,yBAAO,GAAE,CAAA;;;;0DAuDb;0CAxDU,+BAA+B;IAD3C,IAAA,iCAAU,GAAE;GACA,+BAA+B,CAyD3C","sourcesContent":["/**\n * SignatureVerificationMiddleware is responsible for verifying the authenticity and integrity of incoming requests.\n *\n * @remarks\n * This middleware performs several checks to ensure the validity of incoming requests. It verifies the provided\n * signature against the original message, checks for timestamp validity, and compares the recovered address with\n * the provided wallet address. Additionally, it can enforce whitelisting for admin access.\n *\n * If any verification step fails, the middleware responds with an appropriate error message and status code.\n */\n\nimport { Context } from \"@tsed/platform-params\";\nimport { MiddlewareMethods, Middleware } from \"@tsed/platform-middlewares\";\nimport { whitelistAddress } from \"../whitelist/whitelist\";\nimport { ethers } from \"ethers\";\n\n@Middleware()\nexport class SignatureVerificationMiddleware implements MiddlewareMethods {\n  use(@Context() $ctx: Context) {\n    try {\n      const { walletAddress, signedMessage, originalMessage, isAdmin } =\n        $ctx.request.body;\n      console.log(walletAddress, signedMessage, originalMessage, isAdmin);\n      console.log(\"originalMessage\", originalMessage);\n\n      if (isAdmin) {\n        console.log(whitelistAddress.includes(walletAddress));\n        if (!whitelistAddress.includes(walletAddress)) {\n          console.log(\"wallet address is not in whitelist\");\n          $ctx.response.status(401).body({\n            message: \"wallet address is not in whitelist\"\n          });\n        }\n      }\n      const timestamp = parseInt(JSON.parse(originalMessage).timestamp);\n      console.log(\"timestamp\", timestamp);\n      if (!timestamp) {\n        $ctx.response.status(401).body({\n          message: \"Timestamp not found\"\n        });\n      }\n\n      // Check if the timestamp is older than 5 minutes (300,000 milliseconds)\n      const currentTime = new Date().getTime();\n      console.log(\"currentTime\", currentTime);\n      if (currentTime - timestamp > 300000) {\n        $ctx.response.status(401).body({\n          message: \"Signature expired\"\n        });\n      }\n\n      console.log(\"originalMessage\", originalMessage);\n      const recoveredAddress = ethers.utils.verifyMessage(\n        originalMessage,\n        signedMessage\n      );\n      console.log(\"recoveredAddress\", recoveredAddress);\n      console.log(\"walletAddress\", walletAddress);\n      // Verify the recovered address and the wallet address\n      if (\n        recoveredAddress !== walletAddress ||\n        currentTime - timestamp > 300000\n      ) {\n        $ctx.response.status(401).body({\n          message: \"Signature verification failed\"\n        });\n      }\n    } catch (error) {\n      // Handle the error by sending a response with an error message and an appropriate status code\n      $ctx.response.status(401).body({\n        message: error.message\n      });\n    }\n  }\n}\n"]}