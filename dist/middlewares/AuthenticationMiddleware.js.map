{"version":3,"file":"AuthenticationMiddleware.js","sourceRoot":"src/","sources":["middlewares/AuthenticationMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, QueryParams } from \"@tsed/platform-params\";\nimport { MiddlewareMethods, Middleware } from \"@tsed/platform-middlewares\";\nimport { ethers } from \"ethers\";\nimport {\n  Account,\n  Credential,\n  Certificate,\n  FlattenedCertificate,\n  CustomerForm,\n  AdminForm\n} from \"../types\";\nimport { Governance } from \"../constants\";\n\nlet log: object = console.log;\n\n@Middleware()\nexport class AuthenticationMiddleware implements MiddlewareMethods {\n  use(@Context() context: Context, @QueryParams() credential: any) {\n    const path = context.endpoint.propertyKey as string;\n    const adminPaths: string[] = Governance.ADMIN_PATHS;\n    const adminAccounts: string[] = Governance.ADMIN_ACCOUNTS;\n    const credentialValidity: number =\n      Governance.CREDENTIAL_VALIDITY_IN_SECONDS;\n\n    const timestampPattern =\n      /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}\\.\\d{3})Z$/;\n    const ethAddressPattern = /^0x[0-9a-fA-F]{40}$/;\n    const now: number = Math.floor(new Date().getTime() / 1000);\n\n    let certificate: Certificate<CustomerForm> | Certificate<AdminForm>;\n    let signedAt: number;\n    let claimed: Account;\n    let recovered: Account;\n    let isAdminAccount: boolean;\n    let isAdminPath: boolean;\n    let timestamp: Date;\n\n    try {\n      certificate = JSON.parse(credential.certificate);\n\n      if (!timestampPattern.test(certificate.timestamp.toString())) {\n        throw new Error(\"Auth: Invalid timestamp\");\n      }\n\n      signedAt = Math.floor(new Date(certificate.timestamp).getTime() / 1000);\n      if (Math.abs(now - signedAt) > credentialValidity) {\n        throw new Error(\"Auth: Expired credential\");\n      }\n\n      claimed = JSON.parse(credential.signer);\n      if (!ethAddressPattern.test(claimed.address)) {\n        throw new Error(\"Auth: Invalid signer\");\n      }\n\n      try {\n        recovered = {\n          address: ethers.utils.verifyMessage(\n            credential.certificate,\n            credential.signature\n          )\n        };\n      } catch (error) {\n        throw new Error(\"Auth: Invalid signature\" + error.message);\n      }\n\n      if (recovered.address.toLowerCase() !== claimed.address.toLowerCase()) {\n        throw new Error(\"Auth: False signer\");\n      }\n\n      isAdminAccount = adminAccounts.includes(recovered.address);\n      isAdminPath = adminPaths.includes(path);\n\n      if (isAdminPath && !isAdminAccount) {\n        throw new Error(\"Auth: Access denied\");\n      }\n    } catch (error) {\n      context.response.status(200).body({\n        code: \"ERROR\",\n        data: null,\n        error: error.message\n      });\n    }\n  }\n}\n"]}