{"version":3,"file":"AddressValidationService.js","sourceRoot":"src/","sources":["utils/AddressValidationService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport class AddressValidationService {\n  private readonly apiKey: string;\n  private readonly apiUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.EASYPOST_API_KEY || \"\";\n    this.apiUrl = \"https://api.easypost.com/v2/addresses/verify\"; // Replace with EasyPost API endpoint\n  }\n\n  async validateAddress(address: {\n    street: string;\n    city: string;\n    state: string;\n    zip: string;\n    country: string;\n  }): Promise<{\n    addressValidation: boolean;\n    addressSuggestion: {\n      street: string;\n      city: string;\n      state: string;\n      zip: string;\n      country: string;\n    };\n  }> {\n    try {\n      const response = await axios.post(\n        this.apiUrl,\n        {\n          verify: [\"delivery\"],\n          address: {\n            street1: address.street,\n            city: address.city,\n            state: address.state,\n            zip: address.zip,\n            country: address.country\n          }\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.apiKey}`\n          }\n        }\n      );\n      console.log(response.data);\n      // Check the response from EasyPost\n      console.log(\"Address validation response:\", response.data.address);\n      console.log(\n        \"Address validation response:\",\n        response.data.address.verifications\n      );\n      if (response.data.address.verifications.delivery.success) {\n        if (\n          address.street === response.data.address.street1 &&\n          address.city === response.data.address.city &&\n          address.state === response.data.address.state &&\n          address.zip === response.data.address.zip &&\n          address.country === response.data.address.country\n        ) {\n          // Address is valid\n          return {\n            addressValidation: true,\n            addressSuggestion: {\n              street: \"\",\n              city: \"\",\n              state: \"\",\n              zip: \"\",\n              country: \"\"\n            }\n          };\n        } else {\n          // Address is invalid with api returning suggested correct address\n          return {\n            addressValidation: false,\n            addressSuggestion: {\n              street: response.data.address.street1,\n              city: response.data.address.city,\n              state: response.data.address.state,\n              zip: response.data.address.zip,\n              country: response.data.address.country\n            }\n          };\n        }\n      }\n      // Address is not valid\n      return {\n        addressValidation: false,\n        addressSuggestion: {\n          street: \"\",\n          city: \"\",\n          state: \"\",\n          zip: \"\",\n          country: \"\"\n        }\n      };\n    } catch (error) {\n      console.error(\"Error validating address:\", error);\n      throw error;\n    }\n  }\n}\n"]}