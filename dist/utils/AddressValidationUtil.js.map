{"version":3,"file":"AddressValidationUtil.js","sourceRoot":"src/","sources":["utils/AddressValidationUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import EasyPostClient from \"@easypost/api\";\nimport { PostalAddress } from \"../types\";\n\ninterface Response {\n  code: string;\n  data: PostalAddress | null;\n}\n\nlet log: any = console.log;\n\nexport class AddressValidationUtil {\n  private readonly apiKey: string;\n  private readonly client: EasyPostClient;\n\n  constructor() {\n    this.apiKey = process.env.EASYPOST_API_KEY || \"\";\n    this.client = new EasyPostClient(this.apiKey);\n  }\n\n  async validateAddress(address: PostalAddress): Promise<Response> {\n    let wrappedAddress: any;\n    let verificationResult: any;\n    try {\n      wrappedAddress = await this.client.Address.create(address);\n    } catch (error) {\n      throw error;\n      //throw new Error(\"UTIL: Failed to wrap address\");\n    }\n\n    try {\n      verificationResult = await this.client.Address.verifyAddress(\n        wrappedAddress.id\n      );\n    } catch (error) {\n      log(\"addrVer \", error.code);\n      log(\"addrVer \", error.errors);\n      throw new Error(\"AddrValError: Failed to verify address\");\n    }\n\n    log(\"verifRes\", verificationResult);\n\n    const isInvalid: boolean =\n      !verificationResult.verifications.delivery.success;\n    if (isInvalid) {\n      return { code: \"ERROR\", data: null };\n    }\n\n    const isDifferent: boolean = !this.compareAddresses(\n      address,\n      verificationResult\n    );\n    log(\"comparison\", isDifferent);\n    if (!isDifferent) {\n      return { code: \"OK\", data: null };\n    }\n\n    const suggestedAddress: PostalAddress = {\n      street1: verificationResult.street1 || \"\",\n      street2: null,\n      city: verificationResult.city || \"\",\n      state: verificationResult.state || \"\",\n      zip: verificationResult.zip || \"\",\n      country: verificationResult.country || \"\"\n    };\n\n    return { code: \"SUSPEND\", data: suggestedAddress };\n  }\n\n  private compareAddresses(\n    address: PostalAddress,\n    verificationResult: any\n  ): boolean {\n    log(\"cmprAddr \", address);\n    log(\"cmprAddr \", verificationResult);\n    return (\n      address.street1.toLowerCase() ===\n        verificationResult.street1.toLowerCase() &&\n      address.city.toLowerCase() === verificationResult.city.toLowerCase() &&\n      address.state.toLowerCase() === verificationResult.state.toLowerCase() &&\n      address.zip.toLowerCase() === verificationResult.zip.toLowerCase() &&\n      address.country.toLowerCase() === verificationResult.country.toLowerCase()\n    );\n  }\n}\n"]}