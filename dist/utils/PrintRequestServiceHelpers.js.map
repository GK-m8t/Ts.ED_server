{"version":3,"file":"PrintRequestServiceHelpers.js","sourceRoot":"src/","sources":["utils/PrintRequestServiceHelpers.ts"],"names":[],"mappings":";;;;AAAA,iCAA8C;AAG9C,sCAA8C;AAC9C,yEAAoC;AAG7B,IAAM,0BAA0B,GAAhC,MAAM,0BAA0B;IAErC,iBAAiB,CAAmC;IAEpD,gBAAe,CAAC;IAChB,UAAU;IACV,6EAA6E;IAE7E,KAAK,CAAC,gBAAgB,CAAC,OAAe;QACpC,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,uBAAuB,CAAC,QAAkC,EAAE,KAAY;QACtE,IACE,QAAQ;YACR,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,aAAa;gBAClD,QAAQ,CAAC,OAAO;gBAChB,QAAQ,CAAC,SAAS,GAAG,qBAAM,CAAC,eAAe;oBACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,EAClC;YACA,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACnC;IACH,CAAC;IAED,cAAc,CAAC,OAAgB;QAC7B,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,sBAAsB,CAAC,6BAAkC;QACvD,IAAI,CAAC,6BAA6B,CAAC,iBAAiB,EAAE;YACpD,IAAI,6BAA6B,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC1D,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,cAAc,CAAC,MAAW,EAAE,QAAkB;QAC5C,OAAO;YACL,YAAY,EAAE,MAAM,CAAC,SAAS;YAC9B,YAAY,EACV,QAAQ,CAAC,OAAO,CAAC,OAAO,KAAK,MAAM,CAAC,YAAY;gBAC9C,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ;gBAC9B,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa;SACxC,CAAC;IACJ,CAAC;IAED,kBAAkB,CAChB,OAAe,EACf,KAAY,EACZ,QAAkB,EAClB,KAAU;QAEV,OAAO,IAAI,IAAI,CAAC,iBAAiB,CAAC;YAChC,OAAO;YACP,KAAK;YACL,QAAQ;YACR,KAAK;YACL,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SACzC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,QAAkC;QACtD,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED,sBAAsB,CAAC,aAAkC;QACvD,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAChD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;IACH,CAAC;CA6BF,CAAA;AA7GY,gEAA0B;AAErC;IADC,IAAA,WAAM,EAAC,0BAAiB,CAAC;;qEAC0B;qCAFzC,0BAA0B;IADtC,IAAA,eAAU,GAAE;;GACA,0BAA0B,CA6GtC","sourcesContent":["import { Injectable, Inject } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport { Buyer, Shipping } from \"../types\";\nimport { PrintRequestModel } from \"../models\";\nimport params from \"../params.json\";\n\n@Injectable()\nexport class PrintRequestServiceHelpers {\n  @Inject(PrintRequestModel)\n  printRequestModel: MongooseModel<PrintRequestModel>;\n\n  constructor() {}\n  // HELPERS\n  // ==========================================================================\n\n  async findPrintRequest(tokenId: number) {\n    return await this.printRequestModel.findOne({ tokenId: tokenId });\n  }\n\n  checkForExistingRequest(printReq: PrintRequestModel | null, buyer: Buyer) {\n    if (\n      printReq &&\n      (printReq.buyer.walletAddress == buyer.walletAddress ||\n        printReq.payment ||\n        printReq.createdAt + params.requestValidity <\n          Math.floor(Date.now() / 1000))\n    ) {\n      throw new Error(\"Request exists\");\n    }\n  }\n\n  checkOwnership(isOwner: boolean) {\n    if (!isOwner) {\n      throw new Error(\"Not owner\");\n    }\n  }\n\n  checkAddressValidation(addressValidationResponseData: any) {\n    if (!addressValidationResponseData.addressValidation) {\n      if (addressValidationResponseData.addressSuggestion.street) {\n        return true;\n      } else {\n        throw new Error(\"Invalid shipping address\");\n      }\n    }\n    return false;\n  }\n\n  calculatePrice(params: any, shipping: Shipping) {\n    return {\n      printingCost: params.printCost,\n      shippingCost:\n        shipping.address.country === params.domesticCode\n          ? params.shippingCost.domestic\n          : params.shippingCost.international\n    };\n  }\n\n  createPrintRequest(\n    tokenId: number,\n    buyer: Buyer,\n    shipping: Shipping,\n    price: any\n  ) {\n    return new this.printRequestModel({\n      tokenId,\n      buyer,\n      shipping,\n      price,\n      createdAt: Math.floor(Date.now() / 1000)\n    });\n  }\n\n  checkRequestExistence(printReq: PrintRequestModel | null) {\n    if (!printReq) {\n      throw new Error(\"Request doesn't exist\");\n    }\n  }\n\n  async findPrintRequests() {\n    return await this.printRequestModel.find();\n  }\n\n  checkRequestsExistence(printRequests: PrintRequestModel[]) {\n    if (!printRequests || printRequests.length === 0) {\n      throw new Error(\"No requests exist\");\n    }\n  }\n\n  /*\n  updateBuyerIfNeeded(printReq: PrintRequestModel, buyer: Buyer) {\n    if (JSON.stringify(printReq.buyer) !== JSON.stringify(buyer)) {\n      printReq.buyer = buyer;\n    }\n    return printReq as PrintRequestModel;\n  }\n\n  async validateAndSetShipping(\n    printReq: PrintRequestModel,\n    shipping: Shipping\n  ) {\n    if (JSON.stringify(printReq.shipping) !== JSON.stringify(shipping)) {\n      const addressValidationResponseData =\n        await this.addressValidationService.validateAddress(shipping.address);\n      if (!addressValidationResponseData.addressValidation) {\n        if (addressValidationResponseData.addressSuggestion.street) {\n          return addressValidationResponseData;\n        } else {\n          throw new Error(\"Invalid shipping address\");\n        }\n      } else {\n        printReq.shipping = shipping;\n      }\n    }\n  }\n  */\n}\n"]}