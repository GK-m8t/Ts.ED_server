{"version":3,"file":"OwnershipVerificationUtil.js","sourceRoot":"src/","sources":["utils/OwnershipVerificationUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@tsed/di\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { Account, Contract } from \"../types\";\nimport { System } from \"../constants\";\n\nlet log: any = console.log;\n\n@Injectable()\nexport class OwnershipVerificationUtil {\n  private readonly contract: Contract;\n  private readonly deployedContract: ethers.Contract;\n  private readonly provider: ethers.providers.JsonRpcProvider;\n  private lastUpdate: number = 0;\n  private readonly ownersRefetchInterval: number = 1000;\n  private readonly owners: any = {};\n\n  constructor() {\n    this.contract = {\n      address: System.CONTRACT_ADDRESS,\n      abi: System.CONTRACT_ABI\n    };\n    this.provider = new ethers.providers.JsonRpcProvider(System.BLOCKCHAIN_RPC);\n    this.deployedContract = new ethers.Contract(\n      this.contract.address,\n      this.contract.abi,\n      this.provider\n    );\n  }\n\n  async verifyOwnership(tokenId: string, account: Account): Promise<boolean> {\n    try {\n      const now: number = Math.floor(new Date().getTime() / 1000);\n      if (now - this.lastUpdate > this.ownersRefetchInterval) {\n        await this.updateOwners();\n        this.lastUpdate = now;\n      }\n      let ownerTokens = this.owners[account.address.toLowerCase()];\n      if (ownerTokens) {\n        return ownerTokens.includes(tokenId);\n      } else {\n        return false;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async updateOwners() {\n    let baseURL = \"https://polygon-mainnet.g.alchemy.com/nft/v2/\";\n    const options = {\n      method: \"GET\",\n      url: baseURL + process.env.ALCHEMY_API_KEY + \"/getOwnersForCollection\",\n      params: {\n        contractAddress: this.contract.address,\n        withTokenBalances: \"true\"\n      },\n      headers: { accept: \"application/json\" }\n    };\n\n    try {\n      let res: any = await axios.request(options);\n      let ownrs = res.data.ownerAddresses;\n      for (let i = 0; i < ownrs.length; i++) {\n        let tkns = ownrs[i].tokenBalances;\n        this.owners[ownrs[i].ownerAddress] = [];\n        for (let j = 0; j < tkns.length; j++) {\n          this.owners[ownrs[i].ownerAddress].push(\n            parseInt(tkns[j].tokenId, 16).toString()\n          );\n        }\n      }\n      console.log(\"own\", this.owners);\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n}\n"]}