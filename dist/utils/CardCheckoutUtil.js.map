{"version":3,"file":"CardCheckoutUtil.js","sourceRoot":"src/","sources":["utils/CardCheckoutUtil.ts"],"names":[],"mappings":";;;;AAAA,yCAA6C;AAC7C,iCAA8C;AAC9C,wBAAsB;AACtB,mCAAgC;AAEhC,4CAA0C;AASnC,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAE3B,MAAM,CAAS;IACE,eAAe,CAAS;IAEzC;QACE,IAAI,CAAC,eAAe,GAAG,sBAAU,CAAC,gCAAgC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,OAAe,EACf,OAAgB,EAChB,IAAY;QAEZ,MAAM,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAClD,MAAM,SAAS,GAAW,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC;QACrD,MAAM,MAAM,GAAQ;YAClB,mBAAmB,EAAE,GAAG,OAAO,EAAE;YACjC,oBAAoB,EAAE,CAAC,MAAM,CAAC;YAC9B,UAAU,EAAE;gBACV;oBACE,UAAU,EAAE;wBACV,QAAQ,EAAE,KAAK;wBACf,YAAY,EAAE;4BACZ,IAAI,EAAE,OAAO;yBACd;wBACD,WAAW,EAAE,IAAI,GAAG,GAAG;qBACxB;oBACD,QAAQ,EAAE,CAAC;iBACZ;aACF;YACD,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,SAAS;YACrB,WAAW,EAAE,sBAAU,CAAC,4BAA4B;YACpD,UAAU,EAAE,sBAAU,CAAC,2BAA2B;SACnD,CAAC;QACF,IAAI,OAAY,CAAC;QACjB,IAAI;YACF,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,KAAK,CAAC;SACb;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CAAA;AA7CY,4CAAgB;AAE3B;IADC,IAAA,WAAM,GAAE;sCACD,eAAM;gDAAC;2BAFJ,gBAAgB;IAP5B,IAAA,sBAAa,EAAC;QACb,MAAM,EAAE;YACN,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE;YACxC,UAAU,EAAE,YAAY;SACzB;KACF,CAAC;IACD,IAAA,eAAU,GAAE;;GACA,gBAAgB,CA6C5B","sourcesContent":["import { Configuration } from \"@tsed/common\";\nimport { Inject, Injectable } from \"@tsed/di\";\nimport \"@tsed/stripe\";\nimport { Stripe } from \"stripe\";\nimport { Account, PaymentLink } from \"../types\";\nimport { Governance } from \"../constants\";\n\n@Configuration({\n  stripe: {\n    apiKey: process.env.STRIPE_API_KEY || \"\",\n    apiVersion: \"2020-08-27\"\n  }\n})\n@Injectable()\nexport class CardCheckoutUtil {\n  @Inject()\n  stripe: Stripe;\n  private readonly sessionValidity: number;\n\n  constructor() {\n    this.sessionValidity = Governance.CARD_PAYMENT_VALIDITY_IN_SECONDS;\n  }\n\n  async createSession(\n    tokenId: string,\n    account: Account,\n    cost: number\n  ): Promise<object> {\n    const now: number = Math.floor(Date.now() / 1000);\n    const expiresAt: number = now + this.sessionValidity;\n    const config: any = {\n      client_reference_id: `${tokenId}`,\n      payment_method_types: [\"card\"],\n      line_items: [\n        {\n          price_data: {\n            currency: \"usd\",\n            product_data: {\n              name: \"Wagmi\"\n            },\n            unit_amount: cost * 100\n          },\n          quantity: 1\n        }\n      ],\n      mode: \"payment\",\n      expires_at: expiresAt,\n      success_url: Governance.PAYMENT_SUCCESS_REDIRECT_URL,\n      cancel_url: Governance.PAYMENT_CANCEL_REDIRECT_URL\n    };\n    let session: any;\n    try {\n      session = await this.stripe.checkout.sessions.create(config);\n    } catch (error) {\n      console.log(\"error\", error);\n      throw error;\n    }\n    return session;\n  }\n}\n"]}