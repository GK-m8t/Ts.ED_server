{"version":3,"file":"BlockchainService.js","sourceRoot":"src/","sources":["utils/BlockchainService.ts"],"names":[],"mappings":";;;;AAAA,iCAAsC;AACtC,mCAAgC;AAChC,+DAAyC,CAAC,8CAA8C;AACxF,kFAAkF;AAG3E,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IACX,QAAQ,CAAmC;IAE5D;QACE,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC;QACjC,kDAAkD;QAElD,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAM,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,OAAe,EACf,aAAqB;QAErB,IAAI;YACF;;;;;;;;cAQE;YACF,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CAKF,CAAA;AAlCY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,eAAU,GAAE;;GACA,iBAAiB,CAkC7B","sourcesContent":["import { Injectable } from \"@tsed/di\";\nimport { ethers } from \"ethers\";\nimport * as params from \"../params.json\"; // Import contract parameters from params.json\n// import * as contractAbi from \"./abi.json\"; // Import contract ABI from abi.json\n\n@Injectable()\nexport class BlockchainService {\n  private readonly provider: ethers.providers.JsonRpcProvider;\n\n  constructor() {\n    const polygonRpcUrl = params.rpc;\n    // const contractAddress = params.contractAddress;\n\n    this.provider = new ethers.providers.JsonRpcProvider(polygonRpcUrl);\n  }\n\n  async verifyOwnership(\n    tokenId: number,\n    walletAddress: string\n  ): Promise<boolean> {\n    try {\n      /*\n      const contractAbiArray = contractAbi as any[]; // Convert imported ABI to an array\n\n      const contract = new ethers.Contract(contractAddress, contractAbiArray, this.provider);\n\n      const owner = await contract.ownerOf(tokenId);\n\n      return owner === walletAddress.toLowerCase();\n      */\n      return true;\n    } catch (error) {\n      console.error(\"Error verifying ownership:\", error);\n      return false;\n    }\n  }\n\n  // async getPrintStatus(tokenId: number): Promise<number> {\n  //   // TODO\n  // }\n}\n"]}