{"version":3,"file":"CheckoutService.js","sourceRoot":"src/","sources":["services/rest/CheckoutService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport {\n  Account,\n  Order,\n  Payment,\n  PaymentMethod,\n  PaymentStatus,\n  PaymentLink\n} from \"../../types\"; // Import the PaymentMethod enum from your types file\nimport { CardCheckoutUtil, CryptoCheckoutUtil } from \"../../utils\";\n\n@Injectable()\nexport class CheckoutService {\n  @Inject() private cardUtil: CardCheckoutUtil;\n  @Inject() private cryptoUtil: CryptoCheckoutUtil;\n  @Inject(Order)\n  orderBook: MongooseModel<Order>;\n\n  constructor() {}\n\n  async createSession(\n    tokenId: string,\n    account: Account,\n    paymentMethod: PaymentMethod\n  ): Promise<PaymentLink> {\n    let session: any;\n    let util: CardCheckoutUtil | CryptoCheckoutUtil;\n    let isCard: boolean = paymentMethod === PaymentMethod.card;\n    util = isCard ? this.cardUtil : this.cryptoUtil;\n\n    try {\n      const order: any = await this.orderBook.findOne({\n        tokenId: tokenId\n      });\n\n      if (!order) {\n        throw new Error(\"Order doesn't exist.\");\n      } else if (order.status && order.status.payment) {\n        throw new Error(\"Payment pending or completed.\");\n      } else if (\n        order.account.address.toLowerCase() !== account.address.toLowerCase()\n      ) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      const totalCost: number = order.cost.print + order.cost.ship;\n      session = await util.createSession(tokenId, account, totalCost);\n\n      // order.payment = {\n      //   method: paymentMethod,\n      //   session: session,\n      //   lastEventId: null\n      // };\n      // order.status = { payment: PaymentStatus.pending, shipping: null };\n      // await order.save();\n\n      await this.orderBook.updateOne(\n        { tokenId: tokenId },\n        {\n          $set: {\n            payment: {\n              method: paymentMethod,\n              session: session,\n              lastEventId: null\n            },\n            status: {\n              payment: \"PS00\",\n              shipping: null\n            }\n          }\n        }\n      );\n\n      if (isCard) {\n        return { url: session.url, expiresAt: session.expires_at };\n      } else {\n        return { url: session.hosted_url, expiresAt: session.expires_at };\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getSession(tokenId: string, account: Account): Promise<PaymentLink> {\n    try {\n      const order: Order | null = await this.orderBook.findOne({\n        tokenId: tokenId\n      });\n\n      if (!order) {\n        throw new Error(\"Order doesn't exist.\");\n      } else if (!order.payment) {\n        throw new Error(\"Session doesn't exist.\");\n      } else if (\n        order.account.address.toLowerCase() !== account.address.toLowerCase()\n      ) {\n        throw new Error(\"Unauthorised\");\n      }\n\n      // Incomplete implementation.\n      return { url: \"\", expiresAt: new Date() };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"]}