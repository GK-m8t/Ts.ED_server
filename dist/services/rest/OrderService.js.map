{"version":3,"file":"OrderService.js","sourceRoot":"src/","sources":["services/rest/OrderService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport mongoose from \"mongoose\";\nimport {\n  Cost,\n  Account,\n  Shipping,\n  Order,\n  PostalAddress,\n  PaymentStatus,\n  ShippingStatus\n} from \"../../types\";\nimport { AddressValidationUtil } from \"../../utils\";\n\nlet log: object = console.log;\n\ninterface AddressValidationResult {\n  code: string;\n  data: PostalAddress | null;\n}\n\ninterface UpdateOrderResult {\n  isOrder: boolean;\n  data: PostalAddress | Order;\n}\n\n@Injectable()\nexport class OrderService {\n  @Inject(Order)\n  orderBook: MongooseModel<Order>;\n\n  constructor(\n    private service: AddressValidationUtil //private helper: PrintRequestServiceHelpers\n  ) {}\n\n  async createOrder(\n    tokenId: string,\n    account: Account,\n    shipping: Shipping\n  ): Promise<PostalAddress | Order> {\n    try {\n      const order: Order | null = await this.orderBook.findOne({\n        tokenId: tokenId\n      });\n\n      if (order instanceof Order && order.status) {\n        if (order.status.payment) {\n          throw new Error(\"Payment pending or completed.\");\n        } else if (\n          order.account.address.toLowerCase() === account.address.toLowerCase()\n        ) {\n          throw new Error(\"Order exists.\");\n        } else {\n          await this.orderBook.deleteOne({ tokenId: tokenId });\n        }\n      }\n\n      const res: AddressValidationResult = await this.service.validateAddress(\n        shipping.address\n      );\n      console.log(\"Address val result \", res);\n      if (res.data) {\n        return res.data;\n      } else if (res.code === \"ERROR\") {\n        throw new Error(\"Invalid address\");\n      } else {\n        //const cost: Cost = this.helper.calculateCost(shipping.address);\n        const cost: Cost = { print: 50.0, ship: 5.0 };\n        const newOrder: any = new this.orderBook({\n          tokenId: tokenId,\n          account: account,\n          cost: cost,\n          shipping: shipping,\n          payment: null,\n          status: null\n        });\n        await newOrder.save();\n        return newOrder._doc;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getOrder(tokenId: string, account: Account): Promise<Order> {\n    try {\n      const order: Order | null = await this.orderBook.findOne({\n        tokenId: tokenId\n      });\n\n      if (!order) {\n        throw new Error(\"Order doesn't exist.\");\n      } else if (\n        order.account.address.toLowerCase() === account.address.toLowerCase()\n      ) {\n        return order;\n      } else if (order.status && order.status.payment) {\n        throw new Error(\"Payment pending or completed.\");\n      } else {\n        await this.orderBook.deleteOne({ tokenId: tokenId });\n        throw new Error(\"Order doesn't exist.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getOrders(): Promise<Order[]> {\n    try {\n      const orders: Order[] = await this.orderBook.find();\n\n      if (!orders || orders.length <= 0) {\n        throw new Error(\"Collection empty.\");\n      }\n      return orders;\n    } catch (error) {\n      console.error(\"Error fetching data for the tokens:\", error);\n      throw error;\n    }\n  }\n\n  async updateOrder(\n    tokenId: string,\n    account: Account,\n    shipping: Shipping\n  ): Promise<UpdateOrderResult> {\n    try {\n      const dbURL = mongoose.connections;\n      const order = await this.orderBook.findOne({ tokenId: tokenId });\n      console.log(`Checking update order \\n`, tokenId);\n      if (!order) {\n        throw new Error(\"Order doesn't exist.\");\n      } else if (order.status && order.status.payment) {\n        // CONSIDER: ShippingStatus\n        throw new Error(\"Payment pending or completed.\");\n      } else if (\n        order.account.address.toLowerCase() !== account.address.toLowerCase()\n      ) {\n        throw new Error(\"Create new order.\");\n      } else {\n        const res: AddressValidationResult = await this.service.validateAddress(\n          shipping.address\n        );\n        console.log(\"Address val result \", res);\n        if (res.data) {\n          return { data: res.data, isOrder: false };\n        } else if (res.code === \"ERROR\") {\n          throw new Error(\"Invalid address\");\n        } else {\n          order.shipping = shipping;\n          // await order.save();\n          await this.orderBook.updateOne(\n            { tokenId: tokenId },\n            {\n              $set: {\n                shipping: shipping\n              }\n            }\n          );\n          return { data: order, isOrder: true };\n          //return order.toObject;\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    tokenId: string,\n    shippingStatus: ShippingStatus\n  ): Promise<Order> {\n    try {\n      const dbURL = mongoose.connections;\n      const order = await this.orderBook.findOne({ tokenId: tokenId });\n      if (!order) {\n        throw new Error(\"Order doesn't exist.\");\n      } else if (\n        order.status &&\n        order.status.payment !== PaymentStatus.completed\n      ) {\n        // CONSIDER: ShippingStatus\n        throw new Error(\"Payment pending\");\n      } else {\n        if (order.status) {\n          order.status.shipping = shippingStatus;\n          // await order.save();\n          await this.orderBook.updateOne(\n            { tokenId: tokenId },\n            {\n              $set: {\n                \"status.shipping\": shippingStatus\n              }\n            }\n          );\n          return order;\n        } else {\n          throw new Error(\"Status object is not set\");\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"]}