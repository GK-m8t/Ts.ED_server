{"version":3,"file":"PaymentService.js","sourceRoot":"src/","sources":["services/PaymentService.ts"],"names":[],"mappings":";;;;AAAA,iCAA8C;AAE9C,sCAA8C;AAC9C,0CAAuE;AACvE,oCAAwD,CAAC,qDAAqD;AAGvG,IAAM,cAAc,GAApB,MAAM,cAAc;IACP,kBAAkB,CAAqB;IACvC,oBAAoB,CAAuB;IAE7D,iBAAiB,CAAmC;IAEpD,gBAAe,CAAC;IAChB,KAAK,CAAC,oBAAoB,CACxB,OAAe,EACf,UAAmB;QAEnB,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;gBACpD,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;YACH,IAAI,WAAW,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC7D,IAAI,QAAQ,EAAE;gBACZ,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC;gBACxE,IAAI,QAAQ,EAAE,OAAO,EAAE;oBACrB,OAAO,CACL,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAC3D,CAAC;iBACb;qBAAM;oBACL,IAAI,UAAU,EAAE;wBACd,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAC5D,OAAO,EACP,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC;qBACH;yBAAM;wBACL,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAChE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC;qBACH;iBACF;gBACD,QAAQ,CAAC,OAAO,GAAG;oBACjB,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,qBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM;oBAC9D,IAAI,EAAE,WAAW,CAAC,WAAW;oBAC7B,MAAM,EAAE,qBAAa,CAAC,OAAO;oBAC7B,gBAAgB,EAAE,WAAW,CAAC,SAAS;iBACxC,CAAC;gBACF,yBAAyB;gBACzB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtB,OAAO,WAAW,CAAC,WAAqB,CAAC;aAC1C;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAChD;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF,CAAA;AApDY,wCAAc;AACP;IAAjB,IAAA,WAAM,GAAE;sCAA6B,6BAAkB;0DAAC;AACvC;IAAjB,IAAA,WAAM,GAAE;sCAA+B,+BAAoB;4DAAC;AAE7D;IADC,IAAA,WAAM,EAAC,0BAAiB,CAAC;;yDAC0B;yBAJzC,cAAc;IAD1B,IAAA,eAAU,GAAE;;GACA,cAAc,CAoD1B","sourcesContent":["import { Inject, Injectable } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport { PrintRequestModel } from \"../models\";\nimport { CryptoPaymentService, CardPaymentService } from \"../services\";\nimport { PaymentMethod, PaymentStatus } from \"../types\"; // Import the PaymentMethod enum from your types file\n\n@Injectable()\nexport class PaymentService {\n  @Inject() private cardPaymentService: CardPaymentService;\n  @Inject() private cryptoPaymentService: CryptoPaymentService;\n  @Inject(PrintRequestModel)\n  PrintRequestModel: MongooseModel<PrintRequestModel>;\n\n  constructor() {}\n  async createPaymentSession(\n    tokenId: number,\n    isCardFlag: boolean\n  ): Promise<any> {\n    try {\n      const printReq = await this.PrintRequestModel.findOne({\n        tokenId: tokenId\n      });\n      let paymentData = { payment_url: \"\", timestamp: Date.now() };\n      if (printReq) {\n        const price = printReq.price.printingCost + printReq.price.shippingCost;\n        if (printReq?.payment) {\n          return (\n            printReq.payment.status === \"completed\" ? \"\" : printReq.payment.link\n          ) as string;\n        } else {\n          if (isCardFlag) {\n            paymentData = await this.cardPaymentService.createStripeCharge(\n              tokenId,\n              price ? price : 0\n            );\n          } else {\n            paymentData = await this.cryptoPaymentService.createCoinbaseCharge(\n              price ? price : 0\n            );\n          }\n        }\n        printReq.payment = {\n          method: isCardFlag ? PaymentMethod.card : PaymentMethod.crypto,\n          link: paymentData.payment_url,\n          status: PaymentStatus.pending,\n          createdTimeStamp: paymentData.timestamp\n        };\n        // printReq.payment=null;\n        await printReq.save();\n        console.log(printReq);\n        return paymentData.payment_url as string;\n      } else {\n        throw new Error(\"Print Request doesnt exists\");\n      }\n    } catch (error) {\n      console.error(\"Error posting data to API:\", error);\n      throw error;\n    }\n  }\n}\n"]}