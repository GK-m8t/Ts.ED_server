{"version":3,"file":"CardPaymentService.js","sourceRoot":"src/","sources":["services/webhook/CardPaymentService.ts"],"names":[],"mappings":";;;;AAAA,iCAA8C;AAE9C,uCAAmD;AAI5C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAE7B,SAAS,CAAuB;IACf,gBAAgB,GAAa;QAC5C,4BAA4B;QAC5B,0BAA0B;KAC3B,CAAC;IAEF,gBAAe,CAAC;IAEhB,KAAK,CAAC,WAAW,CAAC,KAAU;QAC1B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC/C,OAAO,IAAI,CAAC;SACb;QACD,MAAM,cAAc,GAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;QAC9C,MAAM,KAAK,GAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YAC9C,oBAAoB,EAAE,cAAc,CAAC,EAAE;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC7C,OAAO,KAAK,CAAC;SACd;QAED,IAAI;YACF,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC,EAAE,EAAE;gBAC1C,OAAO,IAAI,CAAC;aACb;YACD,QAAQ,KAAK,CAAC,IAAI,EAAE;gBAClB,KAAK,4BAA4B;oBAC/B,0CAA0C;oBAC1C,kDAAkD;oBAClD,wCAAwC;oBACxC,sBAAsB;oBACtB,sBAAsB;oBACtB,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAC5B,EAAE,oBAAoB,EAAE,cAAc,CAAC,EAAE,EAAE,EAC3C;wBACE,IAAI,EAAE;4BACJ,iBAAiB,EAAE,cAAc;4BACjC,gBAAgB,EAAE,qBAAa,CAAC,SAAS;4BACzC,qBAAqB,EAAE,KAAK,CAAC,EAAE;yBAChC;qBACF,CACF,CAAC;oBACF,MAAM;gBACR,KAAK,0BAA0B;oBAC7B,wBAAwB;oBACxB,+BAA+B;oBAC/B,sBAAsB;oBACtB,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAC5B,EAAE,oBAAoB,EAAE,cAAc,CAAC,EAAE,EAAE,EAC3C;wBACE,IAAI,EAAE;4BACJ,gBAAgB,EAAE,IAAI;4BACtB,OAAO,EAAE,IAAI;yBACd;qBACF,CACF,CAAC;oBACF,MAAM;gBACR;oBACE,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;aACtC;YACD,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF,CAAA;AAnEY,gDAAkB;AAE7B;IADC,IAAA,WAAM,EAAC,aAAK,CAAC;;qDACkB;6BAFrB,kBAAkB;IAD9B,IAAA,eAAU,GAAE;;GACA,kBAAkB,CAmE9B","sourcesContent":["import { Injectable, Inject } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport { Order, PaymentStatus } from \"../../types\";\nimport mongoose from \"mongoose\";\n\n@Injectable()\nexport class CardPaymentService {\n  @Inject(Order)\n  orderBook: MongooseModel<Order>;\n  private readonly recognisedEvents: string[] = [\n    \"checkout.session.completed\",\n    \"checkout.session.expired\"\n  ];\n\n  constructor() {}\n\n  async handleEvent(event: any): Promise<boolean> {\n    if (!this.recognisedEvents.includes(event.type)) {\n      return true;\n    }\n    const sessionInEvent: any = event.data.object;\n    const order: any = await this.orderBook.findOne({\n      \"payment.session.id\": sessionInEvent.id\n    });\n\n    if (!order || !order.payment || !order.status) {\n      return false;\n    }\n\n    try {\n      if (order.payment.lastEventId === event.id) {\n        return true;\n      }\n      switch (event.type) {\n        case \"checkout.session.completed\":\n          // order.payment.session = sessionInEvent;\n          // order.status.payment = PaymentStatus.completed;\n          // order.payment.lastEventId = event.id;\n          // await order.save();\n          // console.log(order);\n          await this.orderBook.updateOne(\n            { \"payment.session.id\": sessionInEvent.id },\n            {\n              $set: {\n                \"payment.session\": sessionInEvent,\n                \"status.payment\": PaymentStatus.completed,\n                \"payment.lastEventId\": event.id\n              }\n            }\n          );\n          break;\n        case \"checkout.session.expired\":\n          // order.payment = null;\n          // order.status.payment = null;\n          // await order.save();\n          await this.orderBook.updateOne(\n            { \"payment.session.id\": sessionInEvent.id },\n            {\n              $set: {\n                \"status.payment\": null,\n                payment: null\n              }\n            }\n          );\n          break;\n        default:\n          console.log(\"Unrecognised event.\");\n      }\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n"]}