{"version":3,"file":"PrintRequestService.js","sourceRoot":"src/","sources":["services/PrintRequestService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from \"@tsed/di\";\nimport { MongooseModel } from \"@tsed/mongoose\";\nimport { Buyer, Shipping, PaymentStatus } from \"../types\";\nimport { PrintRequestModel } from \"../models\";\nimport {\n  BlockchainService,\n  AddressValidationService,\n  PrintRequestServiceHelpers\n} from \"../utils\";\nimport params from \"../params.json\";\n@Injectable()\nexport class PrintRequestService {\n  @Inject(PrintRequestModel)\n  printRequestModel: MongooseModel<PrintRequestModel>;\n\n  constructor(\n    private blockchainService: BlockchainService,\n    private addressValidationService: AddressValidationService,\n    private printServiceHelpers: PrintRequestServiceHelpers\n  ) {}\n\n  async createRequest(tokenId: number, buyer: Buyer, shipping: Shipping) {\n    try {\n      // check whether buyer is token owner\n      // if not, then throw error\n      // else, proceed\n      const isOwner = await this.blockchainService.verifyOwnership(\n        tokenId,\n        buyer.walletAddress\n      );\n      this.printServiceHelpers.checkOwnership(isOwner);\n\n      // check whether a valid request is already created by the buyer\n      // if created, then throw error\n      // else, proceed\n      const printReq = await this.printServiceHelpers.findPrintRequest(tokenId);\n      this.printServiceHelpers.checkForExistingRequest(printReq, buyer);\n\n      // validate shipping address via easypost\n      // if incorrect or invalid, then throw error\n      // else, proceed\n      const addressValidationResponseData =\n        await this.addressValidationService.validateAddress(shipping.address);\n      const isAddressSuggested =\n        this.printServiceHelpers.checkAddressValidation(\n          addressValidationResponseData\n        );\n      if (isAddressSuggested) {\n        return addressValidationResponseData;\n      }\n\n      // calculate total cost considering shipping address\n      const price = this.printServiceHelpers.calculatePrice(params, shipping);\n\n      // create a new request\n      const newReq = this.printServiceHelpers.createPrintRequest(\n        tokenId,\n        buyer,\n        shipping,\n        price\n      );\n      await newReq.save();\n\n      return addressValidationResponseData;\n    } catch (error) {\n      console.error(\"Error creating data for the token id:\", error);\n      throw error;\n    }\n  }\n\n  async getRequest(tokenId: number, walletAddress: string) {\n    try {\n      // check whether buyer is token owner\n      // if not, then throw error\n      // else, proceed\n      const isOwner = await this.blockchainService.verifyOwnership(\n        tokenId,\n        walletAddress\n      );\n      this.printServiceHelpers.checkOwnership(isOwner);\n\n      // check whether the request exists\n      // if not, then throw error\n      // else, proceed\n      const printReq = await this.printServiceHelpers.findPrintRequest(tokenId);\n      this.printServiceHelpers.checkRequestExistence(printReq);\n\n      return printReq;\n    } catch (error) {\n      console.error(\"Error fetching data for the token id:\", error);\n      throw error;\n    }\n  }\n\n  async getAllRequests() {\n    try {\n      const printRequests = await this.printServiceHelpers.findPrintRequests();\n      this.printServiceHelpers.checkRequestsExistence(printRequests);\n\n      return printRequests;\n    } catch (error) {\n      console.error(\"Error fetching data for the tokens:\", error);\n      throw error;\n    }\n  }\n\n  async updateRequest(tokenId: number, buyer: Buyer, shipping: Shipping) {\n    try {\n      // check whether buyer is token owner\n      // if not, then throw error\n      // else, proceed\n      const isOwner = await this.blockchainService.verifyOwnership(\n        tokenId,\n        buyer.walletAddress\n      );\n      this.printServiceHelpers.checkOwnership(isOwner);\n\n      const printReq = await this.printServiceHelpers.findPrintRequest(tokenId);\n      if (printReq) {\n        if (JSON.stringify(printReq.buyer) !== JSON.stringify(buyer)) {\n          printReq.buyer = buyer;\n        }\n        if (JSON.stringify(printReq.shipping) !== JSON.stringify(shipping)) {\n          const addressValidationResponseData =\n            await this.addressValidationService.validateAddress(\n              shipping.address\n            );\n          if (!addressValidationResponseData.addressValidation) {\n            if (addressValidationResponseData.addressSuggestion.street) {\n              return addressValidationResponseData;\n            } else {\n              throw new Error(\"Invalid shipping address\");\n            }\n          } else {\n            printReq.shipping = shipping;\n          }\n        }\n        await printReq.save();\n        return {\n          addressValidation: true,\n          addressSuggestion: {\n            street: \"\",\n            city: \"\",\n            state: \"\",\n            zip: \"\",\n            country: \"\"\n          }\n        };\n      } else {\n        throw new Error(\"Request doesn't exist\");\n      }\n    } catch (error) {\n      console.error(\"Error updating data for the token id:\", error);\n      throw error;\n    }\n  }\n\n  async handleWebhookEvent(event: any, isCard: boolean): Promise<boolean> {\n    try {\n      var checkoutID = \"\";\n      var status = \"\";\n      switch (event.type) {\n        case \"checkout.session.completed\" && isCard:\n          checkoutID = event.data.object.id;\n          status = PaymentStatus.completed;\n          console.log(\"Payment Successful\");\n          break;\n        case \"checkout.session.expired\" && isCard:\n          checkoutID = event.data.object.id;\n          status = \"Expired\";\n          console.log(\"Expired\");\n          break;\n        case \"charge:confirmed\" && !isCard:\n          checkoutID = event.data.code;\n          status = PaymentStatus.completed;\n          console.log(\"Payment Successful\");\n          break;\n        case \"charge:failed\" && !isCard:\n          checkoutID = event.data.code;\n          status = \"Expired\";\n          console.log(\"Expired\");\n          break;\n\n        // ... handle other event types\n        default:\n          console.log(`Unhandled event type ${event.type}`);\n      }\n      if (\n        status === \"Expired\" ||\n        status === PaymentStatus.completed ||\n        status === PaymentStatus.pending\n      ) {\n        const isSuccessfull = await this.updatePaymentStatus(\n          checkoutID,\n          status\n        );\n        return isSuccessfull;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error determining event:\", error);\n      //throw error;\n      return false;\n    }\n  }\n\n  private async updatePaymentStatus(\n    checkoutId: string,\n    status: PaymentStatus | \"Expired\"\n  ): Promise<boolean> {\n    try {\n      const printReq = await this.printRequestModel.findOne({\n        \"payment.link\": {\n          $regex: checkoutId\n        }\n      });\n      if (!printReq) {\n        throw new Error(\"Request with this checkoutID doesnt exists\");\n      } else {\n        if (status === \"Expired\") {\n          delete printReq.payment;\n        } else {\n          if (printReq.payment) {\n            // printReq.payment.link = \"\";\n            printReq.payment.status = status;\n          }\n        }\n        await printReq.save();\n        return true;\n      }\n    } catch (error) {\n      console.error(\"Error updating data for the checkoutID:\", error);\n      // throw error;\n      return false;\n    }\n  }\n}\n"]}