{"version":3,"file":"CryptoPaymentController.js","sourceRoot":"src/","sources":["controllers/webhook/CryptoPaymentController.ts"],"names":[],"mappings":";;;;AAAA,yCAKsB;AACtB,iCAA8C;AAE9C,mEAAiD;AACjD,6CAAsD;AAS/C,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAChB,OAAO,CAAuB;IAC/B,aAAa,GAAW,OAAO,CAAC,GAAG,CAAC,uBAAuB;QAC1E,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB;QACrC,CAAC,CAAC,EAAE,CAAC;IAGD,AAAN,KAAK,CAAC,WAAW,CACD,IAAS,EACJ,OAAwB,EACvB,QAA0B;QAE9C,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAW,CAAC;QAEhE,IAAI;YACF,MAAM,KAAK,GAAG,gCAAO,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SACtE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACjC;QAED,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACrC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;CACF,CAAA;AAvBY,0DAAuB;AAChB;IAAjB,IAAA,WAAM,GAAE;sCAAkB,+BAAoB;wDAAC;AAM1C;IADL,IAAA,aAAI,EAAC,GAAG,CAAC;IAEP,mBAAA,IAAA,mBAAU,GAAE,CAAA;IACZ,mBAAA,IAAA,gBAAe,GAAE,CAAA;IACjB,mBAAA,IAAA,iBAAgB,GAAE,CAAA;;;;0DAYpB;kCAtBU,uBAAuB;IADnC,IAAA,eAAU,EAAC,SAAS,CAAC;GACT,uBAAuB,CAuBnC","sourcesContent":["import {\n  Post,\n  BodyParams,\n  Request as TSEDRestRequest,\n  Response as TSEDRestResponse\n} from \"@tsed/common\";\nimport { Controller, Inject } from \"@tsed/di\";\nimport { Request } from \"express\"; // Import the Express Request type\nimport { Webhook } from \"coinbase-commerce-node\";\nimport { CryptoPaymentService } from \"../../services\";\n\ndeclare module \"express\" {\n  interface Request {\n    rawBody?: string; // Define the custom rawBody property\n  }\n}\n\n@Controller(\"/crypto\")\nexport class CryptoPaymentController {\n  @Inject() private service: CryptoPaymentService;\n  private readonly webhookSecret: string = process.env.COINBASE_WEBHOOK_SECRET\n    ? process.env.COINBASE_WEBHOOK_SECRET\n    : \"\";\n\n  @Post(\"/\")\n  async handleEvent(\n    @BodyParams() body: any,\n    @TSEDRestRequest() request: TSEDRestRequest,\n    @TSEDRestResponse() response: TSEDRestResponse\n  ) {\n    const sig = request.headers[\"x-cc-webhook-signature\"] as string;\n\n    try {\n      const event = Webhook.verifyEventBody(body, sig, this.webhookSecret);\n    } catch (error) {\n      return response.sendStatus(400);\n    }\n\n    await this.service.handleEvent(body);\n    response.send();\n  }\n}\n"]}