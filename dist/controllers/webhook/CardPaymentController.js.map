{"version":3,"file":"CardPaymentController.js","sourceRoot":"src/","sources":["controllers/webhook/CardPaymentController.ts"],"names":[],"mappings":";;;;AAAA,yCAKsB;AACtB,yCAA6C;AAC7C,iCAA8C;AAC9C,wBAAsB;AACtB,mCAAgC;AAChC,6CAAoD;AAS7C,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IACd,OAAO,CAAqB;IACpC,MAAM,CAAS;IACR,SAAS,GAAW,OAAO,CAAC,GAAG,CAAC,cAAc;QAC7D,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc;QAC5B,CAAC,CAAC,EAAE,CAAC;IACU,aAAa,GAAW,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACxE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACnC,CAAC,CAAC,EAAE,CAAC;IACP,wDAAwD;IACxD,4DAA4D;IAE5D,gBAAe,CAAC;IAGV,AAAN,KAAK,CAAC,WAAW,CACD,IAAS,EACJ,OAAwB,EACvB,QAA0B;QAE9C,MAAM,GAAG,GAAQ,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACrD;;;;;;;;;;;;;;;;;;;;UAoBE;QACF,IAAI;YACF,4CAA4C;YAC5C,IAAI,OAAO,CAAC,OAAO,EAAE;gBACnB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc;gBAC/C,OAAO;gBACP,OAAO,CAAC,OAAO,EACf,GAAG,EACH,IAAI,CAAC,aAAa,CACnB,CAAC;gBACF,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACvC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,OAAO,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACjC;QACD,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;CACF,CAAA;AA3DY,sDAAqB;AACd;IAAjB,IAAA,WAAM,GAAE;sCAAkB,6BAAkB;sDAAC;AACpC;IAAT,IAAA,WAAM,GAAE;sCAAS,eAAM;qDAAC;AAanB;IADL,IAAA,aAAI,EAAC,GAAG,CAAC;IAEP,mBAAA,IAAA,mBAAU,GAAE,CAAA;IACZ,mBAAA,IAAA,gBAAe,GAAE,CAAA;IACjB,mBAAA,IAAA,iBAAgB,GAAE,CAAA;;;;wDAwCpB;gCA1DU,qBAAqB;IAPjC,IAAA,sBAAa,EAAC;QACb,MAAM,EAAE;YACN,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE;YACxC,UAAU,EAAE,YAAY;SACzB;KACF,CAAC;IACD,IAAA,eAAU,EAAC,OAAO,CAAC;;GACP,qBAAqB,CA2DjC","sourcesContent":["import {\n  Post,\n  BodyParams,\n  Request as TSEDRestRequest,\n  Response as TSEDRestResponse\n} from \"@tsed/common\";\nimport { Configuration } from \"@tsed/common\";\nimport { Controller, Inject } from \"@tsed/di\";\nimport \"@tsed/stripe\";\nimport { Stripe } from \"stripe\";\nimport { CardPaymentService } from \"../../services\";\n\n@Configuration({\n  stripe: {\n    apiKey: process.env.STRIPE_API_KEY || \"\",\n    apiVersion: \"2020-08-27\"\n  }\n})\n@Controller(\"/card\")\nexport class CardPaymentController {\n  @Inject() private service: CardPaymentService;\n  @Inject() stripe: Stripe;\n  private readonly clientKey: string = process.env.STRIPE_API_KEY\n    ? process.env.STRIPE_API_KEY\n    : \"\";\n  private readonly webhookSecret: string = process.env.STRIPE_WEBHOOK_SECRET\n    ? process.env.STRIPE_WEBHOOK_SECRET\n    : \"\";\n  //private readonly clientKey: string = \"will-add-later\";\n  //private readonly webhookSecret: string = \"will-add-later\";\n\n  constructor() {}\n\n  @Post(\"/\")\n  async handleEvent(\n    @BodyParams() body: any,\n    @TSEDRestRequest() request: TSEDRestRequest,\n    @TSEDRestResponse() response: TSEDRestResponse\n  ) {\n    const sig: any = request.headers[\"stripe-signature\"];\n    /* For testing purpose\n    const event = {\n      id: \"evt_1O4zGF2eZvKYlo2COsw0g4kV\",\n      object: \"event\",\n      api_version: \"2019-02-19\",\n      created: Date.now(),\n      data: {\n        object: body\n      },\n      livemode: false,\n      pending_webhooks: 0,\n      request: {\n        id: null,\n        idempotency_key: null\n      },\n      type:\n        body.object === \"checkout.session.completed\"\n          ? \"checkout.session.completed\"\n          : \"checkout.session.expired\"\n    };\n    */\n    try {\n      //const client = new Stripe(this.clientKey);\n      if (request.rawBody) {\n        const event = this.stripe.webhooks.constructEvent(\n          //body,\n          request.rawBody,\n          sig,\n          this.webhookSecret\n        );\n        await this.service.handleEvent(event);\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n      return response.sendStatus(400);\n    }\n    response.send();\n  }\n}\n"]}