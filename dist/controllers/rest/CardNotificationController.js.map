{"version":3,"file":"CardNotificationController.js","sourceRoot":"src/","sources":["controllers/rest/CardNotificationController.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAEH,yCAAgD;AAChD,iCAA8C;AAC9C,6CAAqD;AAG9C,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAChB,OAAO,CAAsB;IAE/C;;;;;;OAMG;IAEG,AAAN,KAAK,CAAC,aAAa,CAAe,KAAU;QAC1C,IAAI;YACF,mBAAmB;YACnB,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAC7D,KAAK,EACL,IAAI,CACL,CAAC;YACF,wDAAwD;YACxD,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAC;SACxC;QAAC,OAAO,KAAK,EAAE;YACd,yDAAyD;YACzD,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF,CAAA;AA1BY,0DAAuB;AAChB;IAAjB,IAAA,WAAM,GAAE;sCAAkB,8BAAmB;wDAAC;AAUzC;IADL,IAAA,aAAI,EAAC,GAAG,CAAC;IACW,mBAAA,IAAA,mBAAU,GAAE,CAAA;;;;4DAchC;kCAzBU,uBAAuB;IADnC,IAAA,eAAU,EAAC,cAAc,CAAC;GACd,uBAAuB,CA0BnC","sourcesContent":["/**\n * StripeWebhookController is responsible for handling incoming webhooks from Stripe.\n *\n * @remarks\n * This controller receives incoming webhook events and passes them to the PrintRequestService\n * for processing. It acknowledges receipt of the event and handles any errors that may occur during processing.\n */\n\nimport { Post, BodyParams } from \"@tsed/common\";\nimport { Controller, Inject } from \"@tsed/di\";\nimport { PrintRequestService } from \"../../services\";\n\n@Controller(\"/cardwebhook\")\nexport class StripeWebhookController {\n  @Inject() private service: PrintRequestService;\n\n  /**\n   * Handle incoming webhook events from Stripe.\n   *\n   * @param event - The incoming webhook event payload.\n   * @returns A response indicating whether the webhook event was successfully received.\n   * @throws If an error occurs during webhook event processing, it is logged and rethrown.\n   */\n  @Post(\"/\")\n  async handleWebhook(@BodyParams() event: any): Promise<any> {\n    try {\n      // Handle the event\n      const isWebhookReceived = await this.service.handleWebhookEvent(\n        event,\n        true\n      );\n      // Return a response to acknowledge receipt of the event\n      return { received: isWebhookReceived };\n    } catch (error) {\n      // Handle any errors that occur during webhook processing\n      console.error(\"Webhook processing error:\", error);\n      throw error;\n    }\n  }\n}\n"]}