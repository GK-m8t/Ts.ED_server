{"version":3,"file":"PrintRequestController.js","sourceRoot":"src/","sources":["controllers/rest/PrintRequestController.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * PrintRequestController is responsible for managing print requests and associated operations.\n *\n * @remarks\n * This controller handles a variety of operations related to print requests, including creating new requests,\n * retrieving existing requests, updating requests, and retrieving a list of all requests (admin-only).\n * It employs signature verification middleware for request validation and security.\n */\n\nimport { Controller, Inject } from \"@tsed/di\";\nimport { PathParams, BodyParams } from \"@tsed/platform-params\";\nimport { Get, Post, Put } from \"@tsed/schema\";\n// import { Post } from \"@tsed/schema\";\nimport { Use } from \"@tsed/platform-middlewares\";\nimport { Buyer, Shipping } from \"../../types\";\nimport { SignatureVerificationMiddleware } from \"../../middlewares\";\nimport { PrintRequestService } from \"../../services\";\n@Controller(\"/requests\")\nexport class PrintRequestController {\n  @Inject() private service: PrintRequestService;\n\n  /**\n   * Create a new print request based on provided information.\n   *\n   * @param tokenId - The identifier of the product for which a request is created.\n   * @param walletAddress - The wallet address associated with the request.\n   * @param signedMessage - The signed message for request validation.\n   * @param originalMessage - The original message for request validation.\n   * @param isAdmin - A boolean flag indicating admin access.\n   * @param buyer - Information about the buyer.\n   * @param shipping - Information about the shipping address.\n   * @returns Information about the created request, including the given request creation status and associated shipping address validation.\n   */\n  @Post(\"/:tokenId\")\n  @Use(SignatureVerificationMiddleware)\n  async createRequest(\n    @PathParams(\"tokenId\") tokenId: number,\n    @BodyParams(\"walletAddress\") walletAddress: string,\n    @BodyParams(\"signedMessage\") signedMessage: string,\n    @BodyParams(\"originalMessage\") originalMessage: string,\n    @BodyParams(\"isAdmin\") isAdmin: boolean,\n    @BodyParams(\"buyer\") buyer: Buyer,\n    @BodyParams(\"shipping\") shipping: Shipping\n  ) {\n    const responseData = await this.service.createRequest(\n      tokenId,\n      buyer,\n      shipping\n    );\n\n    return {\n      message: responseData.addressValidation\n        ? \"Request created\"\n        : \"Address Validation pending\",\n      isValid: responseData.addressValidation,\n      suggestedAddress: responseData.addressSuggestion\n    };\n  }\n\n  /**\n   * Retrieve a list of all print requests (admin-only).\n   *\n   * @param walletAddress - The wallet address associated with the request.\n   * @param signedMessage - The signed message for request validation.\n   * @param originalMessage - The original message for request validation.\n   * @param isAdmin - A boolean flag indicating admin access.\n   * @returns A list of all print requests (admin-only).\n   */\n  @Get(\"/\")\n  @Use(SignatureVerificationMiddleware)\n  async getAllRequests(\n    @BodyParams(\"walletAddress\") walletAddress: string,\n    @BodyParams(\"signedMessage\") signedMessage: string,\n    @BodyParams(\"originalMessage\") originalMessage: string,\n    @BodyParams(\"isAdmin\") isAdmin: boolean\n  ) {\n    if (isAdmin) {\n      const allTokenRequestData = await this.service.getAllRequests();\n\n      return allTokenRequestData;\n    } else {\n      throw new Error(\"This is an admin only function\");\n    }\n  }\n\n  /**\n   * Retrieve a specific print request based on its identifier.\n   *\n   * @param tokenId - The identifier of the product for which the request is retrieved.\n   * @param walletAddress - The wallet address associated with the request.\n   * @param signedMessage - The signed message for request validation.\n   * @param originalMessage - The original message for request validation.\n   * @param isAdmin - A boolean flag indicating admin access.\n   * @returns Information stored in the database about the requested print request.\n   */\n  @Get(\"/:tokenId\")\n  @Use(SignatureVerificationMiddleware)\n  async getRequest(\n    @PathParams(\"tokenId\") tokenId: number,\n    @BodyParams(\"walletAddress\") walletAddress: string,\n    @BodyParams(\"signedMessage\") signedMessage: string,\n    @BodyParams(\"originalMessage\") originalMessage: string,\n    @BodyParams(\"isAdmin\") isAdmin: boolean\n  ) {\n    const tokenRequestData = await this.service.getRequest(\n      tokenId,\n      walletAddress\n    );\n\n    return tokenRequestData;\n  }\n\n  /**\n   * Update an existing print request based on provided information.\n   *\n   * @param tokenId - The identifier of the product for which a request is updated.\n   * @param walletAddress - The wallet address associated with the request.\n   * @param signedMessage - The signed message for request validation.\n   * @param originalMessage - The original message for request validation.\n   * @param isAdmin - A boolean flag indicating admin access.\n   * @param buyer - Information about the buyer.\n   * @param shipping - Information about the updated shipping address.\n   * @returns Information about the updated request, including the given request update status and associated shipping address validation.\n   */\n  @Put(\"/:tokenId\")\n  @Use(SignatureVerificationMiddleware)\n  async updateRequest(\n    @PathParams(\"tokenId\") tokenId: number,\n    @BodyParams(\"walletAddress\") walletAddress: string,\n    @BodyParams(\"signedMessage\") signedMessage: string,\n    @BodyParams(\"originalMessage\") originalMessage: string,\n    @BodyParams(\"isAdmin\") isAdmin: boolean,\n    @BodyParams(\"buyer\") buyer: Buyer,\n    @BodyParams(\"shipping\") shipping: Shipping\n  ) {\n    const responseData = await this.service.updateRequest(\n      tokenId,\n      buyer,\n      shipping\n    );\n\n    return {\n      message: responseData.addressValidation\n        ? \"Request Updated\"\n        : \"Address Validation pending\",\n      isValid: responseData.addressValidation,\n      suggestedAddress: responseData.addressSuggestion\n    };\n  }\n}\n"]}