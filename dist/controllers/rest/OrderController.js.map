{"version":3,"file":"OrderController.js","sourceRoot":"src/","sources":["controllers/rest/OrderController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller, Inject } from \"@tsed/di\";\nimport { Get, Post, Put } from \"@tsed/schema\";\nimport { Use } from \"@tsed/platform-middlewares\";\nimport { PathParams, QueryParams, BodyParams } from \"@tsed/platform-params\";\n\nimport {\n  Credential,\n  Account,\n  Order,\n  Shipping,\n  PostalAddress,\n  ShippingStatus\n} from \"../../types\";\nimport {\n  AuthenticationMiddleware,\n  OwnershipVerificatonMiddleware\n} from \"../../middlewares\";\nimport { OrderService } from \"../../services\";\n\ninterface Response {\n  code: string;\n  data: PostalAddress | Order | Order[] | null;\n  error: string | null;\n}\n\nlet log: object = console.log;\n\n@Controller(\"/orders\")\nexport class OrderController {\n  @Inject() private service: OrderService;\n\n  @Get(\"/\")\n  @Use(AuthenticationMiddleware)\n  async getOrders(@QueryParams() credential: Credential): Promise<Response> {\n    try {\n      const result: Order[] = await this.service.getOrders();\n      return { code: \"OK\", data: result, error: null };\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n\n  @Post(\"/:tokenId\")\n  @Use(OwnershipVerificatonMiddleware)\n  @Use(AuthenticationMiddleware)\n  async createOrder(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any,\n    @BodyParams(\"shipping\") shipping: Shipping\n  ): Promise<Response> {\n    const account: Account = JSON.parse(credential.signer);\n    let result: PostalAddress | Order;\n\n    try {\n      result = await this.service.createOrder(tokenId, account, shipping);\n      if (result.hasOwnProperty(\"tokenId\")) {\n        return { code: \"OK\", data: result, error: null };\n      } else {\n        return {\n          code: \"SUSPEND\",\n          data: result,\n          error: \"Address partially invalid.\"\n        };\n      }\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n\n  @Get(\"/:tokenId\")\n  @Use(OwnershipVerificatonMiddleware)\n  @Use(AuthenticationMiddleware)\n  async getOrder(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any\n  ): Promise<Response> {\n    //const form: UserForm = JSON.parse(credential.form);\n    const account: Account = JSON.parse(credential.signer);\n\n    try {\n      const result: Order = await this.service.getOrder(tokenId, account);\n      return { code: \"OK\", data: result, error: null };\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n\n  @Put(\"/:tokenId\")\n  @Use(AuthenticationMiddleware)\n  @Use(OwnershipVerificatonMiddleware)\n  async updateOrder(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any,\n    @BodyParams(\"shipping\") shipping: Shipping\n  ): Promise<Response> {\n    //const form: UserForm = JSON.parse(credential.form);\n    const account: Account = JSON.parse(credential.signer);\n    //let result: PostalAddress | Order;\n    let result: any;\n\n    try {\n      const result = await this.service.updateOrder(tokenId, account, shipping);\n      if (result.isOrder) {\n        return { code: \"OK\", data: result.data, error: null };\n      } else {\n        return {\n          code: \"SUSPEND\",\n          data: result.data,\n          error: \"Address partially invalid.\"\n        };\n      }\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n\n  @Put(\"/status/:tokenId\")\n  @Use(AuthenticationMiddleware)\n  //@Use(OwnershipVerificatonMiddleware)\n  async updateStatus(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any,\n    @BodyParams() shippingStatus: any\n  ): Promise<Response> {\n    //const form: UserForm = JSON.parse(credential.form);\n    let result: Order;\n    try {\n      const result: Order = await this.service.updateStatus(\n        tokenId,\n        shippingStatus.shippingStatus\n      );\n      return { code: \"OK\", data: result, error: null };\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n}\n"]}