{"version":3,"file":"CryptoNotificationController.js","sourceRoot":"src/","sources":["controllers/rest/CryptoNotificationController.ts"],"names":[],"mappings":";AAAA;;;;;;;GAOG;;;;AAEH,yCAAyC;AACzC,iCAA8C;AAE9C,mEAAiD;AACjD,6CAAqD;AAQrD,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,EAAE,CAAC;AAGzD,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAClB,OAAO,CAAsB;IAE/C;;;;;;OAMG;IAGG,AAAN,KAAK,CAAC,aAAa,CAAQ,OAAgB;QACzC,MAAM,SAAS,GAAG,OAAO,CAAC,OAAiB,CAAC;QAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAW,CAAC;QAEtE,IAAI;YACF,MAAM,KAAK,GAAG,gCAAO,CAAC,eAAe,CACnC,SAAS,EACT,SAAS,EACT,aAAa,CACd,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;YAC3C,4DAA4D;YAC5D,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAC7D,KAAK,EACL,KAAK,CACN,CAAC;YACF,OAAO,oBAAoB,GAAG,KAAK,CAAC,EAAE,CAAC;SACxC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;IACH,CAAC;CACF,CAAA;AAlCY,8DAAyB;AAClB;IAAjB,IAAA,WAAM,GAAE;sCAAkB,8BAAmB;0DAAC;AAWzC;IADL,IAAA,aAAI,EAAC,GAAG,CAAC;IACW,mBAAA,IAAA,YAAG,GAAE,CAAA;;;;8DAqBzB;oCAjCU,yBAAyB;IADrC,IAAA,eAAU,EAAC,mBAAmB,CAAC;GACnB,yBAAyB,CAkCrC","sourcesContent":["/**\n * CoinbaseWebhookController is responsible for handling incoming webhooks from Coinbase Commerce.\n *\n * @remarks\n * This controller receives incoming webhook payloads and verifies their authenticity using\n * the provided secret. It then processes the webhook event, such as payment processing, and logs\n * any verification errors or exceptions that may occur during processing.\n */\n\nimport { Req, Post } from \"@tsed/common\";\nimport { Controller, Inject } from \"@tsed/di\";\nimport { Request } from \"express\"; // Import the Express Request type\nimport { Webhook } from \"coinbase-commerce-node\";\nimport { PrintRequestService } from \"../../services\";\n\ndeclare module \"express\" {\n  interface Request {\n    rawBody?: string; // Define the custom rawBody property\n  }\n}\n\nconst webhookSecret = process.env.COINBASE_WEBHOOK_SECRET || \"\";\n\n@Controller(\"/coinbase-webhook\")\nexport class CoinbaseWebhookController {\n  @Inject() private service: PrintRequestService;\n\n  /**\n   * Handle incoming webhooks from Coinbase Commerce.\n   *\n   * @param request - The Express Request object containing the webhook payload.\n   * @returns A string indicating the status of webhook processing.\n   * @throws If there is an error during webhook verification, it is logged and rethrown.\n   */\n\n  @Post(\"/\")\n  async handleWebhook(@Req() request: Request): Promise<string> {\n    const eventBody = request.rawBody as string;\n    const signature = request.headers[\"x-cc-webhook-signature\"] as string;\n\n    try {\n      const event = Webhook.verifyEventBody(\n        eventBody,\n        signature,\n        webhookSecret\n      );\n      console.log(\"Webhook Event ID:\", event.id);\n      // Handle the webhook event here (e.g., process the payment)\n      const isWebhookReceived = await this.service.handleWebhookEvent(\n        event,\n        false\n      );\n      return \"Webhook Received: \" + event.id;\n    } catch (error) {\n      console.error(\"Webhook Verification Error:\", error.message);\n      throw new Error(\"Webhook Verification Error\");\n    }\n  }\n}\n"]}