{"version":3,"file":"CheckoutController.js","sourceRoot":"src/","sources":["controllers/rest/CheckoutController.ts"],"names":[],"mappings":";;;;AAAA,iCAA8C;AAC9C,2DAA4E;AAC5E,yCAAyC;AACzC,qEAAiD;AAQjD,mDAA6D;AAC7D,6CAAiD;AAS1C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IACX,OAAO,CAAkB;IAIrC,AAAN,KAAK,CAAC,aAAa,CACM,OAAe,EACvB,UAAe,EAChB,aAAkB;QAEhC,gEAAgE;QAChE,MAAM,OAAO,GAAY,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACvD,IAAI;YACF,MAAM,MAAM,GAAgB,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAC1D,OAAO,EACP,OAAO;YACP,eAAe;YACf,aAAa,CAAC,aAAa,CAC5B,CAAC;YACF,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;SAC5D;IACH,CAAC;IAIK,AAAN,KAAK,CAAC,UAAU,CACS,OAAe,EACvB,UAAe;QAE9B,gEAAgE;QAChE,MAAM,OAAO,GAAY,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAEvD,IAAI;YACF,MAAM,MAAM,GAAgB,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CACvD,OAAO,EACP,OAAO,CACR,CAAC;YACF,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;SAC5D;IACH,CAAC;CACF,CAAA;AA5CY,gDAAkB;AACX;IAAjB,IAAA,WAAM,GAAE;sCAAkB,0BAAe;mDAAC;AAIrC;IAFL,IAAA,aAAI,EAAC,WAAW,CAAC;IACjB,IAAA,0BAAG,EAAC,sCAAwB,CAAC;IAE3B,mBAAA,IAAA,4BAAU,EAAC,SAAS,CAAC,CAAA;IACrB,mBAAA,IAAA,6BAAW,GAAE,CAAA;IACb,mBAAA,IAAA,4BAAU,GAAE,CAAA;;;;uDAed;AAIK;IAFL,IAAA,YAAG,EAAC,WAAW,CAAC;IAChB,IAAA,0BAAG,EAAC,sCAAwB,CAAC;IAE3B,mBAAA,IAAA,4BAAU,EAAC,SAAS,CAAC,CAAA;IACrB,mBAAA,IAAA,6BAAW,GAAE,CAAA;;;;oDAcf;6BA3CU,kBAAkB;IAD9B,IAAA,eAAU,EAAC,WAAW,CAAC;GACX,kBAAkB,CA4C9B","sourcesContent":["import { Controller, Inject } from \"@tsed/di\";\nimport { PathParams, QueryParams, BodyParams } from \"@tsed/platform-params\";\nimport { Get, Post } from \"@tsed/schema\";\nimport { Use } from \"@tsed/platform-middlewares\";\nimport {\n  PaymentLink,\n  Credential,\n  PaymentMethod,\n  CustomerForm,\n  Account\n} from \"../../types\";\nimport { AuthenticationMiddleware } from \"../../middlewares\";\nimport { CheckoutService } from \"../../services\";\n\ninterface Response {\n  code: string;\n  data: PaymentLink | null;\n  error: string | null;\n}\n\n@Controller(\"/checkout\")\nexport class CheckoutController {\n  @Inject() private service: CheckoutService;\n\n  @Post(\"/:tokenId\")\n  @Use(AuthenticationMiddleware)\n  async createSession(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any,\n    @BodyParams() paymentMethod: any\n  ): Promise<Response> {\n    //const form: CustomerForm = JSON.parse(credential.certificate);\n    const account: Account = JSON.parse(credential.signer);\n    try {\n      const result: PaymentLink = await this.service.createSession(\n        tokenId,\n        account,\n        //paymentMethod\n        paymentMethod.paymentMethod\n      );\n      return { code: \"OK\", data: result, error: null };\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n\n  @Get(\"/:tokenId\")\n  @Use(AuthenticationMiddleware)\n  async getSession(\n    @PathParams(\"tokenId\") tokenId: string,\n    @QueryParams() credential: any\n  ): Promise<Response> {\n    //const form: CustomerForm = JSON.parse(credential.certificate);\n    const account: Account = JSON.parse(credential.signer);\n\n    try {\n      const result: PaymentLink = await this.service.getSession(\n        tokenId,\n        account\n      );\n      return { code: \"OK\", data: result, error: null };\n    } catch (error) {\n      return { code: \"ERROR\", data: null, error: error.message };\n    }\n  }\n}\n"]}